odoo.define('ec_pos_billing.models', function (require) {
"use strict";

var models = require('point_of_sale.models');
var _super_posmodel = models.PosModel.prototype;
var rpc = require('web.rpc');


var modules = models.PosModel.prototype.models;

for(var i=0; i<modules.length; i++){
	var model=modules[i];

	if(model.model === 'res.partner'){
		model.fields.push('type_identifier','identification');
	}

	if(model.model === 'res.company'){
		model.fields.push('street','env_type');
	}

	if(model.model === 'invoice.point.emission'){
		model.fields.push('address');
	}

	if(model.model === 'company.establishment'){
		model.fields.push('address_store');
	}
}

models.load_fields ('res.partner', 'identification');

models.PosModel = models.PosModel.extend({
    initialize: function (session, attributes) {
        // New code
        var partner_model = _.find(this.models, function(model){
            return model.model === 'res.partner';
        });
        partner_model.fields.push('type_identifier','identification');
        // Inheritance
        return _super_posmodel.initialize.call(this, session, attributes);
    }
});

    var _super_order_model = models.Order.prototype;
    models.Order = models.Order.extend({
	initialize: function(attributes,options){
	    _super_order_model.initialize.call(this, attributes, options);
	    var customer = this.pos.db.get_partner_by_id(this.pos.config.default_partner_id[0]);
	    if (!customer){
		console.log('WARNING: no default partner in POS');
	    }else{
		this.set({ client: customer });
	    }
	},
	get_access_key: function() {
        var order = this.pos.get_order();
        var accessKey = 'No generada';
        if (order.get_total_with_tax() > 0){
            rpc.query({
                model: "pos.order",
                method: "getAccessKey",
                args: [[order.name]]
                }).then(function(a){
                   //console.log(a);
                   accessKey = a;
                   order['accessKey'] = accessKey;

            });
        }
        return order;
    },


    });


     var _super_pos_model = models.PosModel.prototype;
    models.PosModel = models.PosModel.extend({
            push_and_invoice_order: function(order){
                var self = this;
                var invoiced = new $.Deferred();

                if(!order.get_client()){
                    invoiced.reject({code:400, message:'Missing Customer', data:{}});
                    return invoiced;
                }

                var order_id = this.db.add_order(order.export_as_JSON());

                this.flush_mutex.exec(function(){
                    var done = new $.Deferred(); // holds the mutex

                    // send the order to the server
                    // we have a 30 seconds timeout on this push.
                    // FIXME: if the server takes more than 30 seconds to accept the order,
                    // the client will believe it wasn't successfully sent, and very bad
                    // things will happen as a duplicate will be sent next time
                    // so we must make sure the server detects and ignores duplicated orders

                    var transfer = self._flush_orders([self.db.get_order(order_id)], {timeout:30000, to_invoice:true});

                    transfer.fail(function(error){
                        invoiced.reject(error);
                        done.reject();
                    });

                    // on success, get the order id generated by the server
                    transfer.pipe(function(order_server_id){

                        invoiced.resolve();
                        done.resolve();

                        // generate the pdf and download it
                      
                    });

                    return done;

                });

                return invoiced;
            },

    });





});
